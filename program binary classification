import json
import re
import os
import subprocess
import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# function to get start and ending timestamps for program
def find_program_times(label_data):

    # Find the ID for "program" from actionLabelData
    program_id = None
    for action_label in label_data['config']['actionLabelData']:
        if action_label['name'] == 'program':
            program_id = action_label['id']
            break

    # Find the start and end times for the program using the program_id
    times = []
    if program_id is not None:
        for action in label_data['annotation']['actionAnnotationList']:
            if action['action'] == program_id:
                start_time = action['start']
                end_time = action['end']
                times.append((action['start'], action['end']))
    else:
        print("Program label not found.")

    return times

# Function to get the label for a frame

def get_frame_label(timestamp, program_times, fps):
    # Calculate the timestamp for the current frame
    #print("function get_frame_label output pts timestamp:", timestamp)

    # Check if the timestamp falls within any program time ranges
    for start, end in program_times:
        if start <= timestamp <= end:
            return "program"

    return "non-program"

# Function to preprocess frames
def preprocess_frame(frame):
    # Resize the frame
    target_size = (224, 224)  # Example target size, adjust as needed
    frame_resized = cv2.resize(frame, target_size)

    # Normalize pixel values to [0, 1]
    frame_normalized = frame_resized.astype(np.float32) / 255.0

    # Add any additional preprocessing steps here (e.g., data augmentation)

    return frame_normalized

json_path = "18.json"

# Main---------------------------------------------------------------------------------------------------------------------
# Load JSON file
with open(json_path, 'r') as file:
    data = json.load(file)

# Find frame rate of the video
fps = data['annotation']['video']['fps']

# Find program times
program_times = find_program_times(data)
print(program_times)

# Ensure the directory for saving frames exists
output_dir = 'output_frames'

if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Open the video file, json file
video_path = '18.mp4'
json_path = '18.json'

# Define the frame extraction rate (fps)
fps_rate = 5000  # Adjustable frame extraction rate

# FFmpeg command to extract frames and log PTS (presentation timestamp)
ffmpeg_command = [
    'ffmpeg',
    '-i', video_path,
    '-vf', f'fps={fps_rate},showinfo',  # Extract frames at specified rate, log PTS
    '-vsync', 'vfr',  # Handle variable frame rate videos
    f'{output_dir}/frame_%04d.jpg'
]

# Run FFmpeg and capture the log output
log_output = subprocess.run(ffmpeg_command, capture_output=True, text=True).stderr

# Regular expression to extract frame index (n) and PTS time from the log
pattern = r'(?<=n:)(\d+).*pts_time:(\d+\.\d+)'

# Find all matches for frame index and PTS
matches = re.findall(pattern, log_output)

# For each extracted frame, rename based on PTS, preprocess, label, and output frame
for frame_index, pts_time in matches:
    old_filename = f"{output_dir}/frame_{int(frame_index):04d}.jpg"
    new_filename = f"{output_dir}/frame_{float(pts_time):.2f}.jpg"

    # Step 1: Rename the frame based on PTS time
    if os.path.exists(old_filename):
        os.rename(old_filename, new_filename)
        print(f"Renamed {old_filename} to {new_filename}")

    # Step 2: Preprocess the frame
    frame = cv2.imread(new_filename)
    if frame is not None:
        preprocessed_frame = preprocess_frame(frame)

        # Step 3: Get label for the frame based on PTS
        fps = 30  # Example fps, adjust based on actual video
        label = get_frame_label(float(pts_time), program_times, fps)

        # Step 4: Display the frame showing its file name and PTS time
        labeled_frame_file = f"{new_filename.split('.')[0]}_{label}.jpg"
        cv2_imshow(preprocessed_frame)  # Use cv2_imshow instead of cv2.imshow in Colab/Jupyter
        print(f"PTS: {pts_time} - Label: {label}")

        # Save the labeled frame if desired
        labeled_output_dir = 'labeled_frames'
        if not os.path.exists(labeled_output_dir):
            os.makedirs(labeled_output_dir)
        labeled_frame_path = os.path.join(labeled_output_dir, labeled_frame_file)
        cv2.imwrite(labeled_frame_path, preprocessed_frame)
        print(f"Saved labeled frame: {labeled_frame_file}")
        
        """# Remove the original frame after processing
        os.remove(new_filename)
        print(f"Deleted frame: {new_filename}")
    else:
        print(f"Failed to read frame: {new_filename}")"""

# Close all OpenCV windows after processing
cv2.destroyAllWindows()
